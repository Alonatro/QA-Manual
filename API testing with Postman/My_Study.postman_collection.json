{
	"info": {
		"_postman_id": "53c406e0-779e-48aa-9de0-098149a7aadb",
		"name": "My Study",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "36021887"
	},
	"item": [
		{
			"name": "Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 4000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(4000);\r",
							"});\r",
							"\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"name\");\r",
							"})\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.have.property('age');\r",
							"    pm.expect(responseData).to.have.property('gender');\r",
							"    pm.expect(responseData).to.have.property('name');\r",
							"    pm.expect(responseData).to.have.property('id');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"ID is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"ID should not be empty\");\r",
							"});\r",
							"\r",
							"pm.test(\"Age is between 1 and 100\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData.age).to.be.within(1, 100, \"Age should be between 1 and 100\");\r",
							"});\r",
							"\r",
							"// Test to check the length of the name\r",
							"pm.test(\"Name should consist of 6 or more letters\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const name = responseData.name;\r",
							"        pm.expect(name.length).to.be.at.least(6, \"Name should consist of 6 or more letters\");\r",
							"});\r",
							"\r",
							"pm.test(\"Successful POST request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"name\": \"Veronika\",\r\n\"age\": 36,\r\n\"gender\": \"female\",\r\n\"city\": \"Kyiv\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Url}}/users",
					"host": [
						"{{Url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Another User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"pm.test(\"Body matches string\", function () {",
							"    pm.expect(pm.response.text()).to.include(\"name\");",
							"})",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"    const responseData = pm.response.json();",
							"        ",
							"    pm.expect(responseData).to.have.property('age');    ",
							"    pm.expect(responseData).to.have.property('gender');",
							"    pm.expect(responseData).to.have.property('name');",
							"    pm.expect(responseData).to.have.property('id');",
							"});",
							"",
							"",
							"pm.test(\"ID is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"",
							"    pm.expect(responseData.id).to.be.a('string').and.to.have.lengthOf.at.least(1, \"ID should not be empty\");",
							"});",
							"",
							"pm.test(\"Age is between 1 and 100\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.age).to.be.within(1, 100, \"Age should be between 1 and 100\");",
							"});",
							"",
							"pm.test(\"Successful POST request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "name",
							"value": "Stepan",
							"description": "required",
							"type": "text"
						},
						{
							"key": "age",
							"value": "45",
							"description": "required",
							"type": "text"
						},
						{
							"key": "gender",
							"value": "male",
							"description": "required",
							"type": "text"
						},
						{
							"key": "city",
							"value": "Odessa",
							"description": "optional",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{Url}}/users",
					"host": [
						"{{Url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User with invalid name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Status code is not 200\", function () {",
							"  pm.expect(pm.response.code).to.not.equal(200);",
							"});",
							"",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.body(\"Validation error: name is invalid\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"name\": \"Ann\",\r\n\"age\": 36,\r\n\"gender\": \"female\",\r\n\"city\": \"Kyiv\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Url}}/users",
					"host": [
						"{{Url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Successful GET request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Url}}/users?id=b5e6e8ce-2649-4c0c-8f9e-b3897be1e268",
					"host": [
						"{{Url}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "id",
							"value": "b5e6e8ce-2649-4c0c-8f9e-b3897be1e268"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Another User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test(\"Successful GET request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Url}}/users?id=7b80b539-460e-4862-bc37-993d5540e30d",
					"host": [
						"{{Url}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "id",
							"value": "7b80b539-460e-4862-bc37-993d5540e30d"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User by name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"",
							"pm.test(\"Response Content-Type is application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 400ms\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(400);",
							"});",
							"",
							"pm.test(\"Unsuccessful GET request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([400]);",
							"});",
							"",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.body(\"id is required parameter\");",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{Url}}/users?name=Violetta",
					"host": [
						"{{Url}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "name",
							"value": "Violetta"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is within an acceptable range\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Successful PATCH request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});",
							"",
							"pm.test(\"Response time is more than 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.above(200);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"city\": \"Amsterdam\",\r\n    \"name\": \"Violetta\",\r\n    \"id\": \"b5e6e8ce-2649-4c0c-8f9e-b3897be1e268\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Url}}/users",
					"host": [
						"{{Url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Another User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Successful PATCH request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is more than 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "id",
							"value": "7b80b539-460e-4862-bc37-993d5540e30d",
							"type": "text"
						},
						{
							"key": "name",
							"value": "Fernando",
							"type": "text"
						},
						{
							"key": "city",
							"value": "Amsterdam",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{Url}}/users",
					"host": [
						"{{Url}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "id",
							"value": "7b80b539-460e-4862-bc37-993d5540e30d",
							"disabled": true
						},
						{
							"key": "name",
							"value": "Fernando",
							"disabled": true
						},
						{
							"key": "city",
							"value": "Madrid",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit User without ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"    pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"pm.test(\"Response has the required Content-Type header set to application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.body(\"Id is required\");",
							"});",
							"",
							"pm.test(\"Unsuccessful PATCH request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([400]);",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \r\n    \"name\": \"Madonna\"\r\n    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{Url}}/users",
					"host": [
						"{{Url}}"
					],
					"path": [
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response time is more 200ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.above(200);",
							"});",
							"",
							"pm.test(\"Successful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);",
							"});",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{Url}}/users?id=b5e6e8ce-2649-4c0c-8f9e-b3897be1e268",
					"host": [
						"{{Url}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "id",
							"value": "b5e6e8ce-2649-4c0c-8f9e-b3897be1e268"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Another User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is more 200ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.above(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Successful DELETE request\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{Url}}/users?id=7b80b539-460e-4862-bc37-993d5540e30d",
					"host": [
						"{{Url}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "id",
							"value": "7b80b539-460e-4862-bc37-993d5540e30d"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete by age",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 400\", function () {",
							"  pm.expect(pm.response.code).to.equal(400);",
							"});",
							"",
							"pm.test(\"Response must have the required Content-Type header with value application/json\", function () {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is in an acceptable range\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(400);",
							"});",
							"",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.body(\"id is required parameter\");",
							"});",
							"",
							"pm.test(\"Unsuccessful DELETE request\", function () {",
							"    pm.expect(pm.response.code).to.be.oneOf([400]);",
							"});",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{Url}}/users?age=45",
					"host": [
						"{{Url}}"
					],
					"path": [
						"users"
					],
					"query": [
						{
							"key": "age",
							"value": "45"
						}
					]
				}
			},
			"response": []
		}
	]
}
